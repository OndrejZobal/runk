#!/bin/env runk
# Runk is love runk is life

# the most consequential figures in the tech world are half guys like steve jobs
# and bill gates and half some guy named ronald who maintains a unix tool called
# 'runk' which stands for Ronald's Universal Number Kounter and handles all math
# for every machine on earth

amn... This line is real long isn't it?
-333

# Integer
Int natural: -100
natural: 300
# Natural number
Int integer: -20

# Math operators with no argumets.
Nat no_args: (+ (+) (-) (*) (/))

Nat compicated_function: (+
  (+ 10 $natural
     (+ 15 # Comments int he middle of expressions
        (+ 10
           (+ 2 3)
         )
      ) # Nothing
  )
  (+
    (+ 30
        (- 6 3)
    )
   49 59)
)

Txt text: "What the hell?"
""

# (line $integer)

Nat add_test: (+ 10 1 100)

Int sub_test: (- 100)
Int sub_and_var_test: (- $add_test 10)

Int mul_test: (* 2 2 2 2 2)

Nat div_test: (* 2048 2 16 4)

# =========
# Fibonacci
# =========
Int max: 100
Int n1: 1
Int n2: 0
Int helper: 0
Nat order: 1

Lab lable: !loop
!loop                                               # A label to return to at the beginning of every iteration.
(line $order "th Fibonacci number is: " $n2 "!")    # Prints previous number.
helper: $n1                                         # Saving current number to helper
n1: (+ $n1 $n2)                                     # Sets current number to: current number + previous number
n2: $helper                                         # Copies helper into previous number
order: (+ $order 1)                                 # Increment order.
(goif (<= $order $max) $lable)                      # Jumps if condition is not equal to zero. 

(line)
(line "And that's it!")

Int bruh: 1
