#!/bin/env runk
# Runk is love runk is life

# the most consequential figures in the tech world are half guys like steve jobs
# and bill gates and half some guy named ronald who maintains a unix tool called
# 'runk' which stands for Ronald's Universal Number Kounter and handles all math
# for every machine on earth

amn... This line is real long isn't it?
-333

# Integer
Z natural: -100
natural: 300
# Natural number
Z integer: -20

# Math operators with no argumets.
N no_args: (+ (+) (-) (*) (/))

N compicated_function: (+
  (+ 10 $natural
     (+ 15 # Comments int he middle of expressions
        (+ 10
           (+ 2 3)
         )
      ) # Nothing
  )
  (+
    (+ 30
        (- 6 3)
    )
   49 59)
)

T text: "What the heck?"
L lable: !loop
""
"\"bruh\""

# (out $integer)

N add_test: (+ 10 1 100)

Z sub_test: (- 100)
Z sub_and_var_test: (- $add_test 10)

Z mul_test: (* 2 2 2 2 2)

N div_test: (/ 2048 2 16 4)

Z bruhhhh: (+ $add_test $sub_test)

# =========
# Fibonacci
# =========
Z max: 1000
Z n1: 1
Z n2: 0
Z helper: 0
N order: 1

!loop                                               # A lable to return to at the beginning of every iteration.
(out $order "th Fibonacci number is" $n2 "!")       # Prints previous number.
helper: $n1                                         # Saving current number to herlper
n1: (+ $n1 $n2)                                     # Sets current number to: current number + previous number
n2: $helper                                         # Copyies helper into previous number
order: (+ $order 1)                                 # Increment order.
(jumpnz (< $n2 $max) $lable)                        # Jumps if condition is not equal to zero. 

(out "And that's it!")
